# -*- coding: utf-8 -*-
"""finetuning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SpX38DWSLl3r94xN-_7gstldRJs0FWmT
"""

import pandas as pd
import json
import time


import os
from random import randrange
from functools import partial
import torch
from datasets import load_dataset
from transformers import (AutoModelForCausalLM,
                          AutoTokenizer,
                          BitsAndBytesConfig,
                          HfArgumentParser,
                          LlamaForCausalLM,
                          LlamaTokenizer,
                          TrainerCallback,
                          default_data_collator,
                          Trainer,
                          TrainingArguments,
                          DataCollatorForLanguageModeling,
                          EarlyStoppingCallback,
                          pipeline,
                          logging,
                          set_seed)

import bitsandbytes as bnb
from peft import LoraConfig, PeftModel, AutoPeftModelForCausalLM
from contextlib import nullcontext

# Set up your Hugging Face token
os.environ["HF_TOKEN"] = 'your_huggingface_API_key'

"""**Load Dataset**"""

from google.colab import drive
drive.mount('/content/drive')

# Load dataset
dataset_name = "/content/drive/My Drive/data/summary.csv"
dataset = load_dataset("csv", data_files = dataset_name, split = "train")

"""**Lora Parameters**"""

lora_r = 64
lora_alpha = 16
lora_dropout = 0.1

"""**Configure BitsandBytes for Quantization**"""

use_4bit = True
bnb_4bit_compute_dtype = "float16"
bnb_4bit_quant_type = "nf4"
use_nested_quant = False

compute_dtype = getattr(torch, bnb_4bit_compute_dtype)

bnb_config = BitsAndBytesConfig(
    load_in_4bit=use_4bit,
    bnb_4bit_quant_type=bnb_4bit_quant_type,
    bnb_4bit_compute_dtype=compute_dtype,
    bnb_4bit_use_double_quant=use_nested_quant,
)

if compute_dtype == torch.float16 and use_4bit:
    major, _ = torch.cuda.get_device_capability()
    if major >= 8:
        print("=" * 80)
        print("Your GPU supports bfloat16: accelerate training with bf16=True")
        print("=" * 80)

from huggingface_hub import notebook_login
notebook_login()

model_name = "meta-llama/Llama-2-7b-hf"

"""**load model and tokenizer**"""

model = AutoModelForCausalLM.from_pretrained(
    model_name,
    quantization_config=bnb_config,
    device_map={"": 0}
)
model.config.use_cache = False
model.config.pretraining_tp = 1

tokenizer = AutoTokenizer.from_pretrained(model_name, trust_remote_code=True)
tokenizer.add_special_tokens({'pad_token': '[PAD]'})
tokenizer.pad_token = tokenizer.eos_token
tokenizer.padding_side = "right"

def load_model(bnb_config):

    model_name = "Llama-2-7b-hf"
    PT_DIR = "llama-2-amharic-3784m"
    # Get number of GPU device and set maximum memory
    n_gpus = torch.cuda.device_count()
    max_memory = f'{21960}MB'
    tokenizer = LlamaTokenizer.from_pretrained(model_name)
    # Load model
    model = LlamaForCausalLM.from_pretrained(
        model_name,
        quantization_config = bnb_config,
        device_map = "auto", # dispatch the model efficiently on the available resources
        torch_dtype=torch.float16 #max_memory = {i: max_memory for i in range(n_gpus)},
    )
    #model = PeftModel.from_pretrained(model, PT_DIR)
    # Load model tokenizer with the user authentication token

    #tokenizer = LlamaTokenizer.from_pretrained(model_name)
    # Set padding token as EOS token
    tokenizer.pad_token = tokenizer.eos_token
    return model, tokenizer

"""LoRA"""

peft_config = LoraConfig(
    lora_alpha=lora_alpha,
    lora_dropout=lora_dropout,
    r=lora_r,
    bias="none",
    task_type="CAUSAL_LM",
)

"""Set Training Parameters"""

output_dir = "./trained"
num_train_epochs = 1
fp16 = False
bf16 = False
per_device_train_batch_size = 4
per_device_eval_batch_size = 4
gradient_accumulation_steps = 1
gradient_checkpointing = True
max_grad_norm = 0.3
learning_rate = 2e-4
weight_decay = 0.001
optim = "paged_adamw_32bit"
lr_scheduler_type = "constant"
max_steps = -1
warmup_ratio = 0.03
group_by_length = True
save_steps = 25
logging_steps = 25

training_arguments = TrainingArguments(
    output_dir=output_dir,
    num_train_epochs=num_train_epochs,
    per_device_train_batch_size=per_device_train_batch_size,
    gradient_accumulation_steps=gradient_accumulation_steps,
    optim=optim,
    save_steps=save_steps,
    logging_steps=logging_steps,
    learning_rate=learning_rate,
    weight_decay=weight_decay,
    fp16=fp16,
    bf16=bf16,
    max_grad_norm=max_grad_norm,
    max_steps=max_steps,
    warmup_ratio=warmup_ratio,
    group_by_length=group_by_length,
    lr_scheduler_type=lr_scheduler_type,
    report_to="tensorboard"
)



"""Initialize SFTTrainer"""


from trl import SFTTrainer

trainer = SFTTrainer(
    model=model,
    train_dataset=dataset,
    peft_config=peft_config,
    dataset_text_field="instruction",
    max_seq_length=None,
    tokenizer=tokenizer,
    args=training_arguments,
    packing=False,
)

trainer.train()

"""Save Fine-Tuned Model"""

trainer.model.save_pretrained(new_model)

"""Test the fine-Tuned Model"""

prompt = "What is a large language model?"
instruction = f"### Instruction:\n{prompt}\n\n### Response:\n"
pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=128)
result = pipe(instruction)
print(result[0]['generated_text'][len(instruction):])